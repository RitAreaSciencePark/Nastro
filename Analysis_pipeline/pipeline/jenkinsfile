pipeline {
    agent { 
        node {
            label 'docker'
            }
    }
    parameters {
        string(name: 'pathToSamplesheet', defaultValue: '', description: 'Path to the samplesheet of the work batch')
        string(name: 'RunId', defaultValue: '', description: 'Id of the run that is launching this analysis')
    }
    stages {
        stage('Pull project repository on the Cluster') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''
                        ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.81 '
                            cd ${HOME}/Nastro/Analysis_pipeline && git pull
                        '
                    '''
                }    
            }
        }  
        stage('Merge the files') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''                         
                        ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.81 '

                            cd "${HOME}/Nastro/Analysis_pipeline/mergeFiles"
                            conda activate fastcat

                            # Submit the job and capture the job ID
                            job_id=$(sbatch main.sh "${pathToSamplesheet}" "${RunId}" | awk '{print $NF}')

                            # Check if job submission was successful
                            if [[ -z "$job_id" ]]; then
                            echo "Failed to submit the job."
                            exit 1
                            fi

                            echo "Submitted job with ID: $job_id"

                            # Wait for the job to complete
                            while squeue -j "$job_id" > /dev/null 2>&1; do
                            echo "Waiting for job $job_id to complete..."
                            sleep 10  # Adjust the interval as needed
                            done

                            echo "Job $job_id has completed."
                        ' 
                    '''
                }    
            }
        }  
        stage('Merge summary and telemetry files') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''                         
                        ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.81 '
                            cd ${HOME}/Nastro/Analysis_pipeline/mergeSummaryTelemetry

                            # Submit the job and capture the job ID
                            job_id=$(sbatch main.sh "${pathToSamplesheet}" "${RunId}" | awk '{print $NF}')

                            # Check if job submission was successful
                            if [[ -z "$job_id" ]]; then
                            echo "Failed to submit the job."
                            exit 1
                            fi

                            echo "Submitted job with ID: $job_id"

                            # Wait for the job to complete
                            while squeue -j "$job_id" > /dev/null 2>&1; do
                            echo "Waiting for job $job_id to complete..."
                            sleep 10  # Adjust the interval as needed
                            done

                            echo "Job $job_id has completed."                            
                        ' 
                    '''
                }    
            }
        }
        stage('Create the basecalling report') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''                         
                        ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.81 '
                            cd ${HOME}/Nastro/Analysis_pipeline/basecalling_report
                            sbatch main.sh '${pathToSamplesheet}' '${RunId}'
                        ' 
                    '''
                }    
            }
        }    
        stage('Create the alignment report') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''                         
                        ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.81 '
                            cd ${HOME}/Nastro/Analysis_pipeline/alignment_report
                            sbatch main.sh '${pathToSamplesheet}' '${RunId}'
                        ' 
                    '''
                }    
            }
        }      
    }
}