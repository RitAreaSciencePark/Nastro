pipeline {
    agent { 
        node {
            label 'docker'
            }
    }
    parameters {
        string(name: 'pathToSamplesheet', defaultValue: '/u/area/jenkins_onpexp/Pipeline_long_reads/samplesheet/orfeo_template.json', description: 'Path to the samplesheet of the work batch')
        string(name: 'pathToInputDir', defaultValue: '/u/area/jenkins_onpexp/scratch/TEST/input', description: 'Path to where the dir with symlinks will be stored. Root for each run input dir')
        string(name: 'pathToOutputDir', defaultValue: '/u/area/jenkins_onpexp/scratch/TEST/output', description: 'Path to where the output of the batch will be stored. Root for each run')
        string(name: 'pathToLogsDir', defaultValue: '/u/area/jenkins_onpexp/scratch/TEST/logs', description: 'Path to where the logs of the batch will be stored. Root for each run')
        booleanParam(name: 'RUN_TESTING_CLEANUP', defaultValue: true, description: 'Run Testing Cleanup Stage')
    }
    stages {
        stage('Pull project repository on the Cluster') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline && git checkout newBCC && git pull
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }    
            }
        }
        stage('TESTING CLEANUP') {
            when {
                expression { return params.RUN_TESTING_CLEANUP }
            }
            steps {    
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    /*To be removed*/                                           
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/samplesheet/
                                cp orfeo_template_copy.json orfeo_template.json
                                cd /u/area/jenkins_onpexp/scratch/TEST
                                rm -rf input/*
                                rm -rf output/*
                                rm -rf logs/*
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }
            }
        }        
        stage('Cleanup software dir') {
            steps {    
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {     
                    /*Check if all the trash is removed in the correct way*/                                       
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline
                                rm -rf __pycache__
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }
            }
        }
        stage('Read and check the samplesheet') {
            steps {    
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {                                            
                    /*Check if the samplesheet is correct*/
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline/samplesheet_check
                                python3 main.py '${pathToSamplesheet}'
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }
            }
        }   
        stage('Subset the samplesheet and configure the run') {
            steps {    
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {                                            
                    /*Create from the batch samplesheet the subset to work on for this run
                    of the pipeline. This include input, output, log dirs and the config file*/
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                source ${HOME}/python_venvs/login_venv_jenkins/bin/activate
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline/subset_creation

                                export BUILD_NUMBER_LOCAL='${BUILD_NUMBER}'
                                echo "BUILD NUMBER is:" ${BUILD_NUMBER_LOCAL}

                                python3 main.py '${pathToSamplesheet}' '${pathToInputDir}' '${pathToOutputDir}' '${pathToLogsDir}'
                                #here stop the pipeline if the script python has set the CLOSE_RUN variable to 1
                                deactivate                            
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''                    
                }
            }
        }     
        stage('Create sbatch script and launch the basecalling') {
            steps {    
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {                                            
                    /*Use the run config to create a sbatch script and launch it*/
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline/launch_run

                                export BUILD_NUMBER_LOCAL='${BUILD_NUMBER}'
                                export LOG_PATH='${pathToLogsDir}'

                                export RUN_PARAMS_PATH="${LOG_PATH}/runParams_build_${BUILD_NUMBER_LOCAL}.txt"
                                echo ${RUN_PARAMS_PATH}

                                python3 main.py ${RUN_PARAMS_PATH}

                                #Make executable the sbatch file and launch it
                                id=$(jq -r '.id' $RUN_PARAMS_PATH)
                                logs_dir=$(jq -r '.logs_dir' $RUN_PARAMS_PATH)
                                config_path=$(jq -r '.config_path' $RUN_PARAMS_PATH)
                                
                                #Make pathToSamplesheet an env variable
                                export SAMPLESHEET='${pathToSamplesheet}'

                                sbatch_script="${logs_dir}/script_${id}.sh"

                                chmod +x ${sbatch_script}
                                sbatch ${sbatch_script} ${config_path} ${RUN_PARAMS_PATH}
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''                    
                }
            }
        }               
        stage('Monitor the basecalling') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/Pipeline_long_reads/Basecalling_pipeline/monitor_run
                                export BUILD_NUMBER_LOCAL=\'${BUILD_NUMBER}\'
                                export LOG_PATH=\'${pathToLogsDir}\'
                                export RUN_PARAMS_PATH="${LOG_PATH}/runParams_build_${BUILD_NUMBER_LOCAL}.txt"
                                echo ${RUN_PARAMS_PATH}
                                sbatch script.sh '${pathToSamplesheet}' ${RUN_PARAMS_PATH}                                  
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }
            }
        }
        stage('Ending') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                    sh '''
                        MAX_RETRIES=5
                        RETRY_COUNT=0
                        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                echo "Ending"                        
                            ' && break
                            RETRY_COUNT=$((RETRY_COUNT + 1))
                            echo "Retry $RETRY_COUNT/$MAX_RETRIES..."
                            sleep 5
                        done
                        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                            echo "SSH connection failed after $MAX_RETRIES attempts."
                            exit 1
                        fi
                    '''
                }
            }
        }        
    }
}